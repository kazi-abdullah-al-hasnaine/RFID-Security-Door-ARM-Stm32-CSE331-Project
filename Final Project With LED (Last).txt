#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Servo.h>

// OLED Config
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
//leds
#define RED_LED     PB12
#define GREEN_LED   PB15

// RFID Config
#define RST_PIN     PB0    // RC522 RST
#define SS_PIN      PA4    // RC522 NSS
MFRC522 mfrc522(SS_PIN, RST_PIN);

// Ultrasonic Pins
#define TRIG_PIN    PA2
#define ECHO_PIN    PA1


// Servo
Servo myservo;

// Card UIDs
byte cardA[4] = {0x06, 0xCC, 0x87, 0x97};
byte cardB[4] = {0x03, 0x96, 0x41, 0xC5};



void setup() {
  // Init SPI for RFID
  SPI.begin();
  mfrc522.PCD_Init();

  // Init OLED
  Wire.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextColor(WHITE);

  // Init Servo
  myservo.attach(PA3);
  myservo.write(90);

  // Init Ultrasonic
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

//init LED
pinMode(RED_LED, OUTPUT);
pinMode(GREEN_LED, OUTPUT);

// Turn off both initially
digitalWrite(RED_LED, LOW);
digitalWrite(GREEN_LED, LOW);


  // Boot message (Centered manually)
  display.setTextSize(1);
  display.setCursor(24, 28); // 16 chars * 6px = 96px, (128-96)/2 = 16
  display.println("System Booting...");
  display.display();
  delay(1000);
  display.clearDisplay();
}

void loop() {
  float distance = getDistance();

  if (distance > 5.0) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(30, 0);   // "Developed by" = 12 chars
    display.println("Developed by");

    display.setCursor(24, 20);  // "Soikot, Sunny" = 14 chars
    display.println("Soikot, Sunny,");

    display.setCursor(22, 40);  // "Pial & Showkot" = 15 chars
    display.println("Pial & Showkot");

    display.display();
    delay(500);
    return;
  }

 // Default prompt screen
display.clearDisplay();
display.setTextSize(1);

// "Welcome,"
display.setCursor(40, 0);
display.println("Welcome!");

// "Please swipe your"
display.setCursor(10, 20);
display.println("Please swipe your");

// "card!"
display.setCursor(49, 35);
display.println("card!");

display.display();


  // Wait for RFID card
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    delay(200);
    return;
  }

  bool isCardA = compareUID(mfrc522.uid.uidByte, cardA);
  bool isCardB = compareUID(mfrc522.uid.uidByte, cardB);

  display.clearDisplay();
  display.setTextSize(1);

   if (isCardA) {
    display.setCursor(20, 28);
    display.println("Welcome Soikot");
    display.display();
    blinkLED(GREEN_LED, 1, 150);
    openGate();
  } else if (isCardB) {
    display.setCursor(22, 28);
    display.println("Welcome Sunny");
    display.display();
    blinkLED(GREEN_LED, 1, 150);
    openGate();
  } else {
    display.setCursor(14, 28);
    display.println("Unauthorized User");
    display.display();
    blinkLED(RED_LED, 4, 200);
    delay(3000);
    display.clearDisplay();
    display.display();
  }


  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

bool compareUID(byte *uid, byte *validUID) {
  for (int i = 0; i < 4; i++) {
    if (uid[i] != validUID[i]) return false;
  }
  return true;
}

void openGate() {
  myservo.write(0);
  delay(2000);
  myservo.write(90);
  delay(500);
  display.clearDisplay();
  display.display();
}

float getDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 30000); // 30 ms timeout
  if (duration == 0) return 999; // Timeout or out of range
  return duration * 0.0343 / 2.0; // in cm
}
void blinkLED(int pin, int times, int duration) {
  for (int i = 0; i < times; i++) {
    digitalWrite(pin, HIGH);
    delay(duration);
    digitalWrite(pin, LOW);
    delay(duration);
  }
}
